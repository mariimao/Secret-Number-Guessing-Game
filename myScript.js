// Global variables
let computerNumber; // The secret number generated by the computer for the user to guess
let state; // Stores the current game state, including attempts and guesses
let possibleNumbers; // All potential numbers the computer can use for its guesses


// Generates a secret 3-digit number with unique digits (1-9, no zeroes).
function generateSecretNumber() {
    let digits = [];
    while (digits.length < 3) {
        let num = Math.floor(Math.random() * 9) + 1; // Random digit between 1 and 9
        if (!digits.includes(num)) digits.push(num); // Ensure unique digits
    }
    return digits.join(''); // Return as a concatenated string
}

/**
 * Validates a user's guess.
 * @param {string} guess - The user's input guess.
 * @returns {boolean} - True if the guess is valid (3 unique digits, no zero), false otherwise.
 */
function isValidGuess(guess) {
    return /^[1-9]{3}$/.test(guess) && 
           new Set(guess).size === 3; // Regex checks format, Set ensures unique digits
}

/**
 * Adds a message to the chat window for user or system feedback.
 * @param {string} content - The message content to display.
 * @param {string} alignment - Either "left" or "right", indicating message alignment.
 */
function addMessageToChat(content, alignment) {
    const chatWindow = document.getElementById('chatWindow');
    const message = document.createElement('div');
    message.className = `message ${alignment}`; // Add alignment class
    message.textContent = content; // Set message text
    chatWindow.appendChild(message); // Append message to chat
    chatWindow.scrollTop = chatWindow.scrollHeight; // Auto-scroll to the latest message
}

// Handles the event when the user submits a guess. Checks validity, updates state, and provides feedback.
function submitUserGuess() {
    const userGuess = document.getElementById('userGuess').value.trim();

    // Validate the guess
    let invalidInputMessage = document.getElementById('invalidInputMessage');
    if (!isValidGuess(userGuess)) {
        invalidInputMessage.textContent = "Invalid: Enter a 3-digit number with no repeats and no zeroes.";
        return;
    }
    invalidInputMessage.textContent = ''; // Clear error message if valid

    // Increment user attempt count
    state.userAttempts++;
    addMessageToChat(`Attempt ${state.userAttempts}: ${userGuess}`, 'right');

    // Get feedback from the computer
    const feedback = computerGivesFeedback(userGuess);

    // Check if the guess matches the secret number
    if (userGuess === computerNumber) {
        addMessageToChat(`Correct! My number was ${computerNumber}.`, 'left');
        addMessageToChat("Now it's my turn to guess!", 'left');
        document.getElementById('userGuess').disabled = true; // Disable input
        document.getElementById('submitUserGuess').disabled = true;
        state.userGuessed = true; // User successfully guessed
        switchTurns();
        return;
    }

    // If the user runs out of attempts
    if (state.userAttempts >= 7) {
        addMessageToChat(`You did not guess the number ${computerNumber} within 7 tries. Now it's my turn!`, 'left');
        switchTurns();
        return;
    }

    // Provide feedback and reset input field
    addMessageToChat(`Feedback: ${feedback}`, 'left');
    document.getElementById('userGuess').value = '';
    document.getElementById('userGuess').focus();
}

/**
 * Provides feedback on the user's guess.
 * '+' indicates a correct digit in the correct position,
 * '-' indicates a correct digit in the wrong position.
 * @param {string} userGuess - The user's input guess.
 * @returns {string} - Feedback string (e.g., "+-", "++", "No correct digits").
 */
function computerGivesFeedback(userGuess) {
    let feedback = '';
    for (let i = 0; i < 3; i++) {
        if (userGuess[i] === computerNumber[i]) {
            feedback += '+'; // Correct digit and position
        } else if (computerNumber.includes(userGuess[i])) {
            feedback += '-'; // Correct digit, wrong position
        }
    }

    // Sort feedback for consistent formatting
    feedback = [...feedback].sort().join('');
    return feedback || 'No correct digits';
}

/**
 * Switches turns from the user to the computer.
 */
function switchTurns() {
    document.getElementById("userTurn").style.display = "none";
    let computerTurn = document.getElementById("computerTurn");
    computerTurn.style.display = "flex";
    computerTurn.style.flexDirection = "column";
    computerGuess();
}

//Makes the computer generate a guess and handles feedback from the user.
function computerGuess() {
    const guess = possibleNumbers[Math.floor(Math.random() * possibleNumbers.length)];
    state.computerAttempts++;

    // Handle invalid feedback scenarios
    if (!guess) {
        addMessageToChat("Oh no, you have a mistake in your feedback :(", 'left');
        document.getElementById('submitFeedback').disabled = true;
        state.userGuessed = false; // User can't win if feedback is incorrect
        endGame();
        return;
    }

    // Show computer's guess and prompt for feedback
    addMessageToChat(`Attempt ${state.computerAttempts}: ${guess}`, 'left');
    document.getElementById('feedbackToComputer').value = '';
    document.getElementById('feedbackToComputer').focus();
}


// User provides feedback for computer's guess
function submitComputerFeedback() {
    const feedback = document.getElementById('feedbackToComputer').value.trim();
    const lastComputerGuess = Array.from(document.getElementById('chatWindow').children)
        .reverse()
        .find(message => message.textContent.includes('Attempt'))
        ?.textContent.split(' ')[2];

    let invalidInputMessage = document.getElementById('invalidInputMessage');
    if (!/^[+\-]{0,3}$/.test(feedback)) {
        invalidInputMessage.textContent = "Invalid: Only use '+', '-', or '' (max 3 char).";
        return;
    }
    invalidInputMessage.textContent = '';

    addMessageToChat(`Feedback: ${feedback}`, 'right');

    if (feedback === "+++") {
        addMessageToChat("Yay, I guessed your number! :^)", 'left');
        document.getElementById('submitFeedback').disabled = true;
        state.computerGuessed = true;
        endGame();
        return;
    }

    filterPossibleNumbers(lastComputerGuess, feedback);

    if (state.computerAttempts < 7) {
        computerGuess();
    } else {
        addMessageToChat("I've used all my attempts. I couldn't guess your number :(", 'left');
        document.getElementById('submitFeedback').disabled = true;
        endGame();
    }
}

/**
 * Filters possible numbers for the computer's guesses based on the user's feedback.
 * @param {string} computerGuess - The computer's last guess.
 * @param {string} userFeedback - The feedback provided by the user.
 */
function filterPossibleNumbers(computerGuess, userFeedback) {
    let filteredNumbers = [];

    // go through each number
    for (let i = 0; i < possibleNumbers.length; i++) {
        let feedbackForNum = '';
        let currPossibleNumber = possibleNumbers[i];
    
        // Generate feedback for the current number
        for (let j = 0; j < 3; j++) {
            if (currPossibleNumber[j] === computerGuess[j]) {
                feedbackForNum += '+';
            } else if (computerGuess.includes(currPossibleNumber[j])) {
                feedbackForNum += '-';
            }
        }
    
        // Compare sorted feedback strings (+ is first, - is second)
        // in case the user enters smth like '-+-' and the
        // computer has '+--'
        const sortedUserFeedback = [...userFeedback].sort().join('');
        const sortedFeedbackForNum = [...feedbackForNum].sort().join('');
    
        if (sortedFeedbackForNum === sortedUserFeedback) {
            filteredNumbers.push(currPossibleNumber);
        }
    }
    
    // const filteredNumbers = possibleNumbers.filter(num => {
    //     let feedbackForNum = '';
    //     for (let i = 0; i < 3; i++) {
    //         if (num[i] === computerGuess[i]) {
    //             feedbackForNum += '+';
    //         } else if (computerGuess.includes(num[i])) {
    //             feedbackForNum += '-';
    //         }
    //     }

    //     // Compare sorted feedback strings
    //     const sortedUserFeedback = [...userFeedback].sort().join('');
    //     const sortedFeedbackForNum = [...feedbackForNum].sort().join('');

    //     return sortedFeedbackForNum === sortedUserFeedback;
    // });

    possibleNumbers = filteredNumbers; // Update possible numbers list
}

// Ends the game and displays the results.
function endGame() {
    // show and hides elements
    document.getElementById("endGame").style.display = "block";
    document.getElementById("userTurn").style.display = "none";
    document.getElementById("computerTurn").style.display = "none";
    
    let message = '';

    // Determine the game outcome
    if (state.userGuessed) {
        if (state.computerGuessed) {
            if (state.userAttempts < state.computerAttempts) {
                message = `User wins!<br>You guessed the number in ${state.userAttempts} attempts,<br>while the computer took ${state.computerAttempts} attempts.`;
            } else if (state.userAttempts > state.computerAttempts) {
                message = `Computer wins!<br>The computer guessed the number in ${state.computerAttempts} attempts,<br>while you took ${state.userAttempts} attempts.`;
            } else {
                message = `It's a tie!<br>Both you and the computer guessed the number in ${state.userAttempts} attempts.`;
            }
        } else {
            message = `User wins!<br>You guessed the number correctly,<br>but the computer did not.`;
        }
    } else if (state.computerGuessed) {
        message = `Computer wins!<br>The computer guessed the number correctly,<br>but you did not.`;
    } else {
        message = `No one wins...`;
    }
    document.getElementById("endGameMessage").innerHTML = message; // Display results
}

// Start the game
function loadGame() {
    // Hide and show relevant elements
    document.getElementById("play").style.display = "none";
    document.getElementById("title-cover").style.display = "none";
    document.getElementById("game").style.display = "block";
    document.getElementById("back").style.display = "block";
    document.getElementById("instructions").style.display = "block";
    document.getElementById("title").style.fontSize = "1.7rem";

    // Set initial game variables
    computerNumber = generateSecretNumber();
    possibleNumbers = generateAllPossibleNumbers();
    state = {
        userAttempts: 0,
        computerAttempts: 0,
        userGuessed: false,
        computerGuessed: false
    };

    // If nothing is in the chat window, display a greeting message
    let chatWindow = document.getElementById('chatWindow');
    if (chatWindow.children.length === 0) {
        // add messages
        addMessageToChat("Game started! Try to guess my secret number :)", 'left')
        // show instructions
        openInstructions(true);
    }
}

// Generate all possible numbers for the computer
function generateAllPossibleNumbers() {
    let numbers = [];
    for (let i = 1; i <= 9; i++) {
        for (let j = 1; j <= 9; j++) {
            for (let k = 1; k <= 9; k++) {
                // if no digits repeat, add it to numbers
                if (i !== j && i !== k && j !== k) {
                    numbers.push('' + i + j + k);
                }
            }
        }
    }
    return numbers;
}

// Back to menu
function backToMenu() {
    document.getElementById("play").style.display = "inline-block";
    document.getElementById("game").style.display = "none";
    document.getElementById("title-cover").style.display = "inline-block";
    document.getElementById("back").style.display = "none";
    document.getElementById("instructions").style.display = "none";
    document.getElementById("title").style.fontSize = "2.5rem";
}

/**
 * Open Instructions
 * @param {boolean} fullyOpen whether to open it fullscreen or not
 */
function openInstructions(fullyOpen) {
    let instructionsPopup = document.getElementById("instructionsPopup");
    instructionsPopup.style.display = "block";
    
    // when the user starts the game, it fully shows the instructions
    if (fullyOpen) {
        // make it full screen
        instructionsPopup.style.width = "80%";
        instructionsPopup.style.height = "85%";
        instructionsPopup.style.left = "50%";
        instructionsPopup.style.top = "50%";
        instructionsPopup.style.transform = "translate(-50%, -50%)";
    } else {
        // make it smaller
        instructionsPopup.style.width = "40%";
        instructionsPopup.style.height = "50%";
        instructionsPopup.style.right = "10%";
        instructionsPopup.style.top = "7.5%";
        instructionsPopup.style.left = "auto";
        instructionsPopup.style.transform = "none";
    }
}

// Close Instructions
function closeInstructions() {
    let instructionsPopup = document.getElementById("instructionsPopup");
    instructionsPopup.style.display = "none";
}